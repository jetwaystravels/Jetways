@model DomainLayer.ViewModel.ViewModel
@{
    Layout = null;

}

<div class="py-15 px-20 rounded-4 text-15 bg-blue-1-05 mb-10">
    <div class="d-flex justify-content-end" style="margin-bottom:-15px;"><button id="checkboxLead" class="checkbox-button2" onclick="toggleCheckbox()"></button></div>
   @*  <label class="text-18 fw-600">Traveller Information</label>

    <div class="mb-3">
        <span class="text-primary fw-600" >Important Note:</span>
        <span id="contactfocus">Please ensure that the names of the passengers on the travel documents is the same as on their government issued identity proof.</span>
    </div> *@


    <form asp-action="SGTravllerDetails" asp-controller="SGTripsell" method="post" id="passengerForm">
        @{
            int inafantIdx = 0;
        }
        @for (var i = 0; i < Model.passeengerlist.passengers.Count; i++)
        {
            <input type="hidden" name="passengers[@i].origin" value="@Model.passeengerlist.journeys[0].designator.origin" />
            <input type="hidden" name="passengers[@i].departure" value="@Model.passeengerlist.journeys[0].designator.departure" />
            <input type="hidden" name="passengers[@i].destination" value="@Model.passeengerlist.journeys[0].designator.destination" />
            <input type="hidden" name="passengers[@i].identifier" value="@Model.passeengerlist.journeys[0].segments[0].identifier.identifier" />
            <input type="hidden" name="passengers[@i].carrierCode" value="@Model.passeengerlist.journeys[0].segments[0].identifier.carrierCode" />

            <div><label class="text-16 fw-600">@Model.passeengerlist.passengers[i].passengerTypeCode</label></div>
            <input type="hidden" name="passengerdetails[@i].passengertypecode" value="@Model.passeengerlist.passengers[i].passengerTypeCode" />
            <input type="hidden" name="passengerdetails[@i].passengerkey" value="@Model.passeengerlist.passengers[i].passengerKey" />
            <div class="row" id="PassCount_@i">
                <div class="col-md-1">
                    <select name="passengerdetails[@i].Title" class="form-control" asp-items="@ViewBag.Title" id="TitleCount_@i"></select>
                </div>
                <div class="col-md-3 inputFirstname">
                    <div class="form-input">

                        <input type="text" class="contactFname contactFname_@i" maxlength="32" oninput="validateInputT(event)" id="LeadPass[@i]" placeholder="First & middle name" name="passengerdetails[@i].First" required />

                    </div>
                    <p id="error-Fname_@i" class="error-message error-CFname error-CFname_@i" style="display:none">Enter first name</p>
                    <p class="errorMessageT1 errorMessageT1_@i" style="color: red;font-size:13px;"></p>
                </div>
                <div class="col-md-3">
                    <div class="form-input">

                        <input type="text" id="LastNameCount_@i" class="contactLname" oninput="validateInputTr(event)" maxlength="32" placeholder="Last name" name="passengerdetails[@i].Last" required />

                    </div>
                    <p id="error-Lname_@i" class="error-message error-CLname" style="display:none">Enter last name</p>
                    <p class="errorMessageT2" style="color: red;font-size:13px;"></p>

                </div>
                @{
                    if (@Model.passeengerlist.passengers[i].passengerTypeCode == "ADT" || @Model.passeengerlist.passengers[i].passengerTypeCode == "CHD")
                    {
                                <div class="col-md-3">
                                    <div class="form-input"><input type="text" maxlength="266" oninput="validateEmailTr(event)" id="contactemailID_@i" class="contactemail" placeholder="email" name="" required /></div>
                                    <p class="emailErrorMessageTr" style="color: red; font-size:13px;"></p>
                                    <p id="error-emailname_@i" class="error-message error-emailname" style="display:none">Enter your email</p>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-input"><input type="text" id="contactphoneID_@i" oninput="validatePhoneNumberTr(event)" class="contactphone" name="passengerdetails[@i].mobile" placeholder="phone" name="" required /></div>
                                    <p id="error-phoneN_@i" class="error-message error-phoneN" style="display:none">Enter your phone</p>
                                    <p class="phoneErrorMessageTr" style="color: red; font-size:13px;"></p>
                                </div>
                    }
                }


                @{


                    if (@Model.passeengerlist.passengers[i].passengerTypeCode == "INFT")
                    {
                                <div class="col-md-4">
                                    <div class="form-input dobinput d-flex" id="InfDOBCount_@inafantIdx">
                                        <div class="dob-picker">
                                            <select class="brd-none year-select" id="year_@inafantIdx" required>
                                            </select>
                                            <select class="brd-none month-select" id="month_@inafantIdx" required>
                                            </select>
                                            <select class="brd-none day-select" id="day_@inafantIdx" required>
                                                <option value="" disabled selected>Day</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                        inafantIdx++;

                    }


                }
            </div>
        }
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-primary mt-15" id="showReviewPopup">Save</button>
        </div>
    </form>

</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<!-- Include Bootstrap JavaScript -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
    .modal-body p {
        border-radius: 6px;
        box-shadow: 0 0 10px 0 rgb(0 0 0 / 9%);
        border: 1px solid #E4E3E1;
        padding: 8px;
        margin-bottom: 10px;
    }

    .dobinput {
        background: #fff;
        color: var(--color-light-1);
        border: 1px solid var(--color-border);
        border-radius: 4px;
        padding: 8px;
        min-height: 40px;
        transition: all 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
        width: 100%;
        font-size: 14px;
    }

    .brd-none {
        border: none;
    }

    .custom-select::-ms-expand {
        display: none; /* Hide the arrow icon in IE */
    }

    .custom-select option {
        padding: 5px; /* Set the desired padding for each option */
        height: 50px;
        overflow: hidden;
    }

    .checkbox-button2 {
        display: inline-block;
        width: 20px;
        height: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 0;
        cursor: pointer;
    }


        .checkbox-button2.checked::after {
            content: '\2713';
            font-size: 16px;
            color: #333;
            display: block;
            text-align: center;
            line-height: 20px;
        }

</style>
<script type="text/javascript">

    function validateInputT(event) {
        const input = event.target.value;
        const regex = /^[a-zA-Z]*$/; // Regular expression to match alphabetic characters only

        if (!regex.test(input)) {
            document.querySelectorAll('.errorMessageT1').innerText = "";
            event.target.value = input.replace(/[^a-zA-Z]/g, '');   //Remove non-alphabetic characters
        } else {
            document.querySelectorAll('.errorMessageT1').innerText = "";
        }

        const firstNameInputs = document.querySelectorAll(".contactFname");
     

        // Loop through each row and perform validation simultaneously
        for (let i = 0; i < firstNameInputs.length; i++) {
            const firstName = firstNameInputs[i].value;

            // Check for empty first name
            if (firstName === "") {
                const firstNameError = document.getElementById(`error-Fname_${i}`); // Use unique ID for each error element
                firstNameError.style.display = "block";
                firstNameInputs[i].focus();
                return false; // Early exit if validation fails
            }
            else {
                const firstNameError = document.getElementById(`error-Fname_${i}`); // Use unique ID for each error element
                firstNameError.style.display = "none";
              
            }
        }
        // var firstName = document.querySelector(".contactFname").value;
        // if (firstName == "") {
        //     //alert("Enter Origin Name");
        //     var firstnameToDisplay = document.querySelector('.error-CFname');
        //     firstnameToDisplay.style.display = "block";
        //     document.querySelector(".contactFname").focus();
        //     return false;
        // }
        // else {
        //     var firstnameToDisplay = document.querySelector('.error-CFname');
        //     firstnameToDisplay.style.display = "none";
        // }
    }

    function validateInputTr(event) {
        const input = event.target.value;
        const regex = /^[a-zA-Z]*$/; // Regular expression to match alphabetic characters only

        if (!regex.test(input)) {
            document.querySelector('.errorMessageT2').innerText = "";
            event.target.value = input.replace(/[^a-zA-Z]/g, ''); // Remove non-alphabetic characters
        } else {
            document.querySelector('.errorMessageT2').innerText = "";
        }
        var lastName = document.querySelector(".contactLname").value;
        if (lastName == "") {
            //alert("Enter Origin Name");
            var lastnameToDisplay = document.querySelector('.error-CLname');
            lastnameToDisplay.style.display = "block";
            document.querySelector(".contactLname").focus();
            return false;
        }
        else {
            var lastnameToDisplay = document.querySelector('.error-CLname');
            lastnameToDisplay.style.display = "none";
        }


    }

    function validateEmailTr(event) {
        const email = event.target.value;
        //const regex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/; // Regular expression for basic email validation
        var regex = /^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        if (!regex.test(email)) {
            document.querySelector('.emailErrorMessageTr').innerText = "valid email";
        } else {
            document.querySelector('.emailErrorMessageTr').innerText = "";
        }

        var emailName = document.querySelector(".contactemail").value;
        if (emailName == "") {
            //alert("Enter Origin Name");
            var emailNameToDisplay = document.querySelector('.error-emailname');
            emailNameToDisplay.style.display = "block";
            document.querySelector(".contactemail").focus();
            return false;
        }
        else {
            var emailNameToDisplay = document.querySelector('.error-emailname');
            emailNameToDisplay.style.display = "none";
        }

    }

    function validatePhoneNumberTr(event) {
        const phoneNumber = event.target.value;
        const regex = /^\d{10}$/; // Regular expression for 10-digit phone number validation

        if (!regex.test(phoneNumber)) {
            document.querySelector('.phoneErrorMessageTr').innerText = "valid number.";
        } else {
            document.querySelector('.phoneErrorMessageTr').innerText = "";
        }
        let phoneTRfocus = document.querySelector('.contactphone').value;
        if (phoneTRfocus == "") {

            let phoneTrToDisplay = document.querySelector('.error-phoneN');
            phoneTrToDisplay.style.display = "block";
            document.querySelector('.contactphone').focus();
            return false;
        }
        else {
            let phoneTrToDisplay = document.querySelector('.error-phoneN');
            phoneTrToDisplay.style.display = "none";
        }
    }

   


    ///***************************** */






    var buttonLead = document.getElementById('checkboxLead');
    buttonLead.addEventListener('click', function (e) {
        e.preventDefault();
        buttonLead.checked = !buttonLead.checked;
        if (buttonLead.checked) {
            buttonLead.classList.add('checked');
        } else {
            buttonLead.classList.remove('checked');
        }
        if (buttonLead.checked) {
            alert("Checked!!")
            var emaiLeadPass = document.querySelector('.contactemail').value;
            var phoneLeadPass = document.querySelector('.contactphone').value;

            //Get all elements with class "contactemail" and set their value
            var emailInputsT = document.querySelectorAll(".contactemail");
            emailInputsT.forEach(function (input) {
                input.value = emaiLeadPass;
            });

            // Get all elements with class "contactphone" and set their value
            var phoneInputsT = document.querySelectorAll(".contactphone");
            phoneInputsT.forEach(function (input) {
                input.value = phoneLeadPass;
            });



        } else {
            alert("Checkbox is unchecked");

            var emaiLeadPass = "";
            var phoneLeadPass = "";
            var emailInputsT = document.querySelectorAll(".contactemail");
            emailInputsT.forEach(function (input) {
                input.value = emaiLeadPass;
            });
            var phoneInputsT = document.querySelectorAll(".contactphone");
            phoneInputsT.forEach(function (input) {
                input.value = phoneLeadPass;
            });

            var emaiLeadPassenger = localStorage.getItem('Leadpassenger3');
            var phoneLeadPassenger = localStorage.getItem('Leadpassenger4');
            document.querySelector("#contactemailID").value = emaiLeadPassenger;
            document.querySelector("#contactphoneID").value = phoneLeadPassenger;


        }
    });






    document.addEventListener('DOMContentLoaded', function () {
        const daySelects = document.querySelectorAll('.day-select');
        const monthSelects = document.querySelectorAll('.month-select');
        const yearSelects = document.querySelectorAll('.year-select');

        const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
        }

        function populateDayOptions(daySelect, month, year) {
            daySelect.innerHTML = '<option value="" disabled selected>Day</option>'; // Clear previous options
            let daysInMonth = monthDays[month];
            if (month === 1 && isLeapYear(year)) { // February and leap year
                daysInMonth = 29;
            }
            for (let i = 1; i <= daysInMonth; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                daySelect.appendChild(option);
            }
            daySelect.disabled = false;
        }

        function populateMonthOptions(monthSelect) {
            monthSelect.innerHTML = '<option value="" disabled selected>Month</option>';
            for (let i = 0; i < 12; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = new Date(0, i).toLocaleString('en-US', { month: 'long' });
                monthSelect.appendChild(option);
            }
            monthSelect.disabled = false;
        }

        function populateYearOptions(yearSelect) {
            const currentYear = new Date().getFullYear();
            const maxInfantAge = 2;
            for (let i = currentYear; i >= currentYear - maxInfantAge; i--) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                yearSelect.appendChild(option);
            }
        }

        yearSelects.forEach(populateYearOptions);

        function handleYearChange() {
            const year = parseInt(this.value);
            const parent = this.parentElement;
            const monthSelect = parent.querySelector('.month-select');
            populateMonthOptions(monthSelect);
            const daySelect = parent.querySelector('.day-select');
            daySelect.innerHTML = '<option value="" disabled selected>Day</option>';
            daySelect.disabled = true;
        }

        function handleMonthChange() {
            const parent = this.parentElement;
            const year = parseInt(parent.querySelector('.year-select').value);
            const month = parseInt(this.value);
            const daySelect = parent.querySelector('.day-select');
            populateDayOptions(daySelect, month, year);
        }

        yearSelects.forEach(select => select.addEventListener('change', handleYearChange));
        monthSelects.forEach(select => select.addEventListener('change', handleMonthChange));

        // Initialize the day options for each set of dropdowns
        document.querySelectorAll('select').forEach(select => select.dispatchEvent(new Event('change')));
    });

    function getSelectedDayValue(index) {
        const daySelects = document.querySelectorAll('.day-select');
        if (index < 0 || index >= daySelects.length) {
            throw new Error('Index out of bounds');
        }
        return daySelects[index].value;
    }

    function getSelectedMonthValue(index) {
        const monthSelects = document.querySelectorAll('.month-select');
        if (index < 0 || index >= monthSelects.length) {
            throw new Error('Index out of bounds');
        }
        return monthSelects[index].value;
    }

    function getSelectedYearValue(index) {
        const yearSelects = document.querySelectorAll('.year-select');
        if (index < 0 || index >= yearSelects.length) {
            throw new Error('Index out of bounds');
        }
        return yearSelects[index].value;
    }

</script>

<script type="text/javascript">
    $(document).ready(function () {
        function showForm() {
            $('#passengerForm').show();
        }
        $("#editData").click(function () {
            $("#dataPopup").hide();
        });
        $("#showReviewPopup").click(function (e) {
            e.preventDefault();



            /*******Validation Start*********/
            //if ($("#PassCount_0").is(":visible")) {


            // var firstName = document.querySelector(".contactFname").value;
            // if (firstName == "") {
            //     //alert("Enter Origin Name");
            //     var firstnameToDisplay = document.getElementById("error-Fname");
            //     firstnameToDisplay.style.display = "block";
            //     document.querySelector(".contactFname").focus();
            //     return false;
            // }




            // var lastName = document.querySelector(".contactLname").value;
            // if (lastName == "") {
            //     //alert("Enter Origin Name");
            //     var lastnameToDisplay = document.getElementById("error-Lname");
            //     lastnameToDisplay.style.display = "block";
            //     document.querySelector(".contactLname").focus();
            //     return false;
            // }

            // var emailName = document.querySelector(".contactemail").value;
            // if (emailName == "") {
            //     //alert("Enter Origin Name");
            //     var emailNameToDisplay = document.querySelector('.error-emailname');
            //     emailNameToDisplay.style.display = "block";
            //     document.querySelector(".contactemail").focus();
            //     return false;
            // }

            // let phonefocus = document.querySelector('.contactphone').value;
            // if (phonefocus == "") {

            //     let phoneToDisplay = document.querySelector('.error-phoneN');
            //     phoneToDisplay.textContent = "Please enter your phone number";
            //     phoneToDisplay.style.display = "block";
            //     document.querySelector('.contactphone').focus();
            //     return false;
            // }
            // var mobileNumberPattern = /^\d{10}$/; // Assumes a 10-digit number

            // if (!mobileNumberPattern.test(phonefocus)) {
            //     alert("Please enter a valid 10-digit mobile number.");
            //     return false;
            // }

            ///////*****************************///
            // const firstNameInputs = document.querySelectorAll(".contactFname");
            // const lastNameInputs = document.querySelectorAll(".contactLname");
            // const emailInputs = document.querySelectorAll(".contactemail");
            // const phoneInputs = document.querySelectorAll(".contactphone");

            // // Loop through each row and perform validation simultaneously
            // for (let i = 0; i < firstNameInputs.length; i++) {
            //     const firstName = firstNameInputs[i].value;
            //     const lastName = lastNameInputs[i].value;
            //     const email = emailInputs[i].value;
            //     const phone = phoneInputs[i].value;

            //     // Check for empty first name
            //     if (firstName === "") {
            //         const firstNameError = document.getElementById(`error-Fname_${i}`); // Use unique ID for each error element
            //         firstNameError.style.display = "block";
            //         firstNameInputs[i].focus();
            //         return false; // Early exit if validation fails
            //     }

            //     // Check for empty last name
            //     if (lastName === "") {
            //         const lastNameError = document.getElementById(`error-Lname_${i}`);
            //         lastNameError.style.display = "block";
            //         lastNameInputs[i].focus();
            //         return false;
            //     }

            //     // Check for empty email
            //     if (email === "") {
            //         const emailError = document.getElementById(`error-emailname_${i}`);
            //         emailError.style.display = "block";
            //         emailInputs[i].focus();
            //         return false;
            //     }

            //     // Check for empty phone number
            //     if (phone === "") {
            //         const phoneError = document.getElementById(`error-phoneN_${i}`);
            //         phoneError.textContent = "Please enter your phone number";
            //         phoneError.style.display = "block";
            //         phoneInputs[i].focus();
            //         return false;
            //     }

            //     // Phone number validation (10-digit pattern)
            //     const mobileNumberPattern = /^\d{10}$/;
            //     if (!mobileNumberPattern.test(phone)) {
            //         const phoneError = document.getElementById(`error-phoneN_${i}`);
            //         phoneError.textContent = "Please enter a valid 10-digit mobile number.";
            //         phoneError.style.display = "block";
            //         phoneInputs[i].focus();
            //         return false;
            //     }
            // }

           

            ///************************ */

            //}




            //var day = document.querySelector('.day-select');
            //var month = document.querySelector('.month-select');
            //var year = document.querySelector('.year-select');

            function validateInfantDOB(inafantIdx) {
                var year = document.getElementById("year_" + inafantIdx).value;
                var month = document.getElementById("month_" + inafantIdx).value;
                var day = document.getElementById("day_" + inafantIdx).value;
                var dob = year + "-" + month + "-" + day;

                if (year == "") {
                    alert("Please select year for infant date-of-birth");
                    return false;
                }
                if (month == "") {
                    alert("Please select month for infant date-of-birth");
                    return false;
                }
                if (day == "") {
                    alert("Please select day for infant date-of-birth");
                    return false;
                }

                // Convert the date string into a Date object
                var dobDate = new Date(dob);

                // Get the current date
                var currentDate = new Date();

                // Calculate the difference in milliseconds between the current date and the date of birth
                var timeDiff = currentDate.getTime() - dobDate.getTime();

                // Calculate the difference in years
                var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

                // Check if the age is less than 2 years (24 months)
                if (yearsDiff < 2) {
                    return true; // Infant is valid
                } else {
                    return false; // Infant is too old
                }
            }

            // Example usage:
            if ($("#InfDOBCount_0").is(":visible")) {
                if (!validateInfantDOB(0)) {
                    alert("Infant can't be greater than 2 years.");
                    return false;
                }
            }

            if ($("#InfDOBCount_1").is(":visible")) {
                if (!validateInfantDOB(1)) {
                    alert("Infant can't be greater than 2 years.");
                    return false;
                }
            }

            if ($("#InfDOBCount_2").is(":visible")) {
                if (!validateInfantDOB(2)) {
                    alert("Infant can't be greater than 2 years.");
                    return false;
                }
            }
            if ($("#InfDOBCount_3").is(":visible")) {
                if (!validateInfantDOB(3)) {
                    alert("Infant can't be greater than 2 years.");
                    return false;
                }
            }
            if ($("#InfDOBCount_4").is(":visible")) {
                if (!validateInfantDOB(4)) {
                    alert("Infant can't be greater than 2 years.");
                    return false;
                }
            }
            if ($("#InfDOBCount_5").is(":visible")) {
                if (!validateInfantDOB(5)) {
                    alert("Infant can't be greater than 2 years.");
                    return false;
                }
            }
            // Repeat the above pattern for other visible elements if needed




            // if ($("#InfDOBCount_0").is(":visible")) {
            //     var dob = year.value + "-" + month.value + "-" + day.value;
            //     if (year.value == "") {
            //         alert("Please select year for infant date-of-birth")
            //         return false;
            //     }
            //     if (month.value == "") {
            //         alert("Please select month for infant date-of-birth")
            //         return false;
            //     }
            //     if (day.value == "") {
            //         alert("Please select day for infant date-of-birth")
            //         return false;
            //     }
            //     function validateInfantDOB(dob) {
            //         // Convert the date string into a Date object
            //         var dobDate = new Date(dob);

            //         // Get the current date
            //         var currentDate = new Date();

            //         // Calculate the difference in milliseconds between the current date and the date of birth
            //         var timeDiff = currentDate.getTime() - dobDate.getTime();

            //         // Calculate the difference in years
            //         var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

            //         // Check if the age is less than 2 years (24 months)
            //         if (yearsDiff < 2) {
            //             return true; // Infant is valid
            //         } else {
            //             return false; // Infant is too old
            //         }
            //     }

            //     // Example usage:

            //     //var dob = "2024-01-15"; // Example date of birth
            //     if (validateInfantDOB(dob)) {
            //         //alert("Infant's date of birth is valid.");
            //     } else {
            //         alert("Infant can't be  greater than 2 years.");
            //         return false;
            //     }
            // }
            // if ($("#InfDOBCount_1").is(":visible")) {
            //     var dob = year.value + "-" + month.value + "-" + day.value;
            //     if (year.value == "") {
            //         alert("Please select year for infant date-of-birth")
            //         return false;
            //     }
            //     if (month.value == "") {
            //         alert("Please select month for infant date-of-birth")
            //         return false;
            //     }
            //     if (day.value == "") {
            //         alert("Please select day for infant date-of-birth")
            //         return false;
            //     }

            //     function validateInfantDOB(dob) {
            //         // Convert the date string into a Date object
            //         var dobDate = new Date(dob);

            //         // Get the current date
            //         var currentDate = new Date();

            //         // Calculate the difference in milliseconds between the current date and the date of birth
            //         var timeDiff = currentDate.getTime() - dobDate.getTime();

            //         // Calculate the difference in years
            //         var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

            //         // Check if the age is less than 2 years (24 months)
            //         if (yearsDiff < 2) {
            //             return true; // Infant is valid
            //         } else {
            //             return false; // Infant is too old
            //         }
            //     }

            //     // Example usage:

            //     //var dob = "2024-01-15"; // Example date of birth
            //     if (validateInfantDOB(dob)) {
            //         //alert("Infant's date of birth is valid.");
            //     } else {
            //         alert("Infant can't be  greater than 2 years.");
            //         return false;
            //     }
            // }
            // if ($("#InfDOBCount_2").is(":visible")) {
            //     var dob = year.value + "-" + month.value + "-" + day.value;
            //     if (year.value == "") {
            //         alert("Please select year for infant date-of-birth")
            //         return false;
            //     }
            //     if (month.value == "") {
            //         alert("Please select month for infant date-of-birth")
            //         return false;
            //     }
            //     if (day.value == "") {
            //         alert("Please select day for infant date-of-birth")
            //         return false;
            //     }

            //     function validateInfantDOB(dob) {
            //         // Convert the date string into a Date object
            //         var dobDate = new Date(dob);

            //         // Get the current date
            //         var currentDate = new Date();

            //         // Calculate the difference in milliseconds between the current date and the date of birth
            //         var timeDiff = currentDate.getTime() - dobDate.getTime();

            //         // Calculate the difference in years
            //         var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

            //         // Check if the age is less than 2 years (24 months)
            //         if (yearsDiff < 2) {
            //             return true; // Infant is valid
            //         } else {
            //             return false; // Infant is too old
            //         }
            //     }

            //     // Example usage:

            //     //var dob = "2024-01-15"; // Example date of birth
            //     if (validateInfantDOB(dob)) {
            //         //alert("Infant's date of birth is valid.");
            //     } else {
            //         alert("Infant can't be  greater than 2 years.");
            //         return false;
            //     }
            // }
            // if ($("#InfDOBCount_3").is(":visible")) {
            //     var dob = year.value + "-" + month.value + "-" + day.value;
            //     if (year.value == "") {
            //         alert("Please select year for infant date-of-birth")
            //         return false;
            //     }
            //     if (month.value == "") {
            //         alert("Please select month for infant date-of-birth")
            //         return false;
            //     }
            //     if (day.value == "") {
            //         alert("Please select day for infant date-of-birth")
            //         return false;
            //     }

            //     function validateInfantDOB(dob) {
            //         // Convert the date string into a Date object
            //         var dobDate = new Date(dob);

            //         // Get the current date
            //         var currentDate = new Date();

            //         // Calculate the difference in milliseconds between the current date and the date of birth
            //         var timeDiff = currentDate.getTime() - dobDate.getTime();

            //         // Calculate the difference in years
            //         var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

            //         // Check if the age is less than 2 years (24 months)
            //         if (yearsDiff < 2) {
            //             return true; // Infant is valid
            //         } else {
            //             return false; // Infant is too old
            //         }
            //     }

            //     // Example usage:

            //     //var dob = "2024-01-15"; // Example date of birth
            //     if (validateInfantDOB(dob)) {
            //         //alert("Infant's date of birth is valid.");
            //     } else {
            //         alert("Infant can't be  greater than 2 years.");
            //         return false;
            //     }
            // }
            // if ($("#InfDOBCount_4").is(":visible")) {
            //     var dob = year.value + "-" + month.value + "-" + day.value;
            //     if (year.value == "") {
            //         alert("Please select year for infant date-of-birth")
            //         return false;
            //     }
            //     if (month.value == "") {
            //         alert("Please select month for infant date-of-birth")
            //         return false;
            //     }
            //     if (day.value == "") {
            //         alert("Please select day for infant date-of-birth")
            //         return false;
            //     }

            //     function validateInfantDOB(dob) {
            //         // Convert the date string into a Date object
            //         var dobDate = new Date(dob);

            //         // Get the current date
            //         var currentDate = new Date();

            //         // Calculate the difference in milliseconds between the current date and the date of birth
            //         var timeDiff = currentDate.getTime() - dobDate.getTime();

            //         // Calculate the difference in years
            //         var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

            //         // Check if the age is less than 2 years (24 months)
            //         if (yearsDiff < 2) {
            //             return true; // Infant is valid
            //         } else {
            //             return false; // Infant is too old
            //         }
            //     }

            //     // Example usage:

            //     //var dob = "2024-01-15"; // Example date of birth
            //     if (validateInfantDOB(dob)) {
            //         //alert("Infant's date of birth is valid.");
            //     } else {
            //         alert("Infant can't be  greater than 2 years.");
            //         return false;
            //     }
            // }
            // if ($("#InfDOBCount_5").is(":visible")) {
            //     var dob = year.value + "-" + month.value + "-" + day.value;
            //     if (year.value == "") {
            //         alert("Please select year for infant date-of-birth")
            //         return false;
            //     }
            //     if (month.value == "") {
            //         alert("Please select month for infant date-of-birth")
            //         return false;
            //     }
            //     if (day.value == "") {
            //         alert("Please select day for infant date-of-birth")
            //         return false;
            //     }

            //     function validateInfantDOB(dob) {
            //         // Convert the date string into a Date object
            //         var dobDate = new Date(dob);

            //         // Get the current date
            //         var currentDate = new Date();

            //         // Calculate the difference in milliseconds between the current date and the date of birth
            //         var timeDiff = currentDate.getTime() - dobDate.getTime();

            //         // Calculate the difference in years
            //         var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);

            //         // Check if the age is less than 2 years (24 months)
            //         if (yearsDiff < 2) {
            //             return true; // Infant is valid
            //         } else {
            //             return false; // Infant is too old
            //         }
            //     }

            //     // Example usage:

            //     //var dob = "2024-01-15"; // Example date of birth
            //     if (validateInfantDOB(dob)) {
            //         //alert("Infant's date of birth is valid.");
            //     } else {
            //         alert("Infant can't be  greater than 2 years.");
            //         return false;
            //     }
            // }



            // var day = document.querySelector('.day-select').value;
            // var month = document.querySelector('.month-select').value;
            // var year = document.querySelector('.year-select').value;

            // // Check if any of the dropdowns have default values
            // if (day === "" || month === "" || year === "") {
            //     // Display error message or take necessary action
            //     alert("Please select a valid date of birth.");
            //     return false; // Prevent form submission
            // }
            
            /*******Validation End*********/


            var enteredData = "";
            for (var i = 0; i < @Model.passeengerlist.passengers.Count; i++) {
                var firstName = $("input[name='passengerdetails[" + i + "].First']").val();
                var lastName = $("input[name='passengerdetails[" + i + "].Last']").val();
                var title = $("select[name='passengerdetails[" + i + "].Title']").val();
                var Passengertypecode = $("input[name='passengerdetails[" + i + "].passengertypecode']").val();
                if (Passengertypecode == "ADT") { Passengertypecode = "Adult"; }
                if (Passengertypecode == "CHD") { Passengertypecode = "Child"; }
                enteredData += "<p><strong>Passenger " + (i + 1) + ": (" + Passengertypecode + ")</strong><br>";
                enteredData += "Title: " + title + "<br>";
                enteredData += "First Name: " + firstName + "<br>";
                enteredData += "Last Name: " + lastName + "</p>";
            }
            // Display the entered data in the popup
            $("#enteredData").html(enteredData);
            // Show the popup
            $('#dataPopup').modal('show');
            // Hide the form
            //$('#passengerForm').hide();
        });
        $("#ContinueData").click(function () {
            $('#passengers_id').hide(); //Contact Details Div Hide
            //*************Validation effect Start**********
            var contentToDisplay = document.getElementById("content");
            contentToDisplay.style.display = "none";
            var content2To = document.getElementById("content2");
            content2To.style.display = "none";
            // var toggleButton3To = document.getElementById("toggleButton3");
            // toggleButton3To.style.opacity = "1.0";
            // var content3To = document.getElementById("content3");
            // content3To.style.display = "block";
             var toggleButton4To = document.getElementById("toggleButton4");
             toggleButton4To.style.opacity = "1.0";
            var GSTcontent5To = document.getElementById("content4");
            GSTcontent5To.style.display = "block";

            var GSTContinuebtn1 = document.querySelector("#Continuebtn");
            GSTContinuebtn1.disabled = false;
            GSTContinuebtn1.style.opacity = "1.0";

            var formData = new FormData($("#passengerForm")[0]);
            $.ajax({
                url: "/SGTripsell/SGTravllerDetails",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (result) {
                    //alert(result);
                    $('#SpiceJetPartialView').html(result);
                    // Handle the response from the server if needed
                },
                error: function (error) {
                    // Handle any errors here
                }
            });
        });


    });

</script>




<div class="modal fade" id="dataPopup" tabindex="-1" role="dialog" aria-labelledby="dataPopupLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content pb-3">
            <div class="modal-header">
                <h5 class="modal-title" id="dataPopupLabel">Please review your details to ensure accuracy.</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="enteredData">
                <!-- Display the entered data here -->
               
            </div>
            <div class="d-flex justify-content-end">
                <div class="editbtn me-3">
                    <button type="button" data-dismiss="modal" class="btn btn-primary w-20" id="editData">Edit</button>
                </div>
                <div class="countibtn me-3">
                    <button type="button" data-dismiss="modal"  class="btn btn-primary w-20" id="ContinueData">Continue</button>
                </div>
            </div>

        </div>
    </div>
</div>


