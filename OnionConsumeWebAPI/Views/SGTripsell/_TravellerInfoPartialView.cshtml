@model DomainLayer.ViewModel.ViewModel
@{
    Layout = null;

}

<div class="py-15 px-20 rounded-4 text-15 bg-blue-1-05 mb-10">
    <div class="d-flex justify-content-end" style="margin-bottom:-15px;">
        <span style="margin-right:15px;"><b>Same Lead Passengers Contact Details</b></span>
        <button id="checkboxLead" class="checkbox-button2" onclick="toggleCheckbox()"></button>
    </div>
    <form asp-action="SGTravllerDetails" asp-controller="SGTripsell" method="post" id="passengerForm">
        @{
            int inafantIdx = 0;
        }
        @for (var i = 0; i < Model.passeengerlist.passengers.Count; i++)
        {
            <input type="hidden" name="passengers[@i].origin" value="@Model.passeengerlist.journeys[0].designator.origin" />
            <input type="hidden" name="passengers[@i].departure" value="@Model.passeengerlist.journeys[0].designator.departure" />
            <input type="hidden" name="passengers[@i].destination" value="@Model.passeengerlist.journeys[0].designator.destination" />
            <input type="hidden" name="passengers[@i].identifier" value="@Model.passeengerlist.journeys[0].segments[0].identifier.identifier" />
            <input type="hidden" name="passengers[@i].carrierCode" value="@Model.passeengerlist.journeys[0].segments[0].identifier.carrierCode" />

            <div><label class="text-16 fw-600">@Model.passeengerlist.passengers[i].passengerTypeCode</label></div>
            <input type="hidden" name="passengerdetails[@i].passengertypecode" value="@Model.passeengerlist.passengers[i].passengerTypeCode" />
            <input type="hidden" name="passengerdetails[@i].passengerkey" value="@Model.passeengerlist.passengers[i].passengerKey" />
            <div class="row" id="PassCount_@i">
                <div class="col-md-1">
                    <select name="passengerdetails[@i].Title" class="form-control" asp-items="@ViewBag.Title" id="TitleCount_@i"></select>
                </div>
                <div class="col-md-3 inputFirstname">
                    <div class="form-input">
                        <input type="text" class="contactFname validate-field" data-validate="name" maxlength="32" oninput="validateInputS(event ,@i)" id="LeadPass[@i]" placeholder="First & middle name" name="passengerdetails[@i].First" required />

                    </div>
                    <p id="error-Fname" class="error-message  error-CFname" style="display: none;"></p>
                    <p class="error-message-val " style="display:none"></p>
                </div>
                <div class="col-md-3">

                    <div class="form-input">
                        <input type="text" class="contactLname validate-field" data-validate="last" oninput="validateInputS(event,@i)" maxlength="32" placeholder="Last name" name="passengerdetails[@i].Last" required />

                    </div>
                    <p id="error-Lname" class="error-message error-CLname" style="display:none"></p>

                </div>
                @{
                    if (Model.passeengerlist.passengers[i].passengerTypeCode == "ADT" || Model.passeengerlist.passengers[i].passengerTypeCode == "CHD")
                    {
                        <div class="col-md-3">
                            <div class="form-input"><input type="text" data-validate="email" class="contactemail validate-field" maxlength="266" oninput="validateInputS(event,@i)" id="contactemailID" placeholder="email" name="" required /></div>
                        </div>
                        <p class="error-message error-emailname" style="display:none"></p>
                        <p class="error-message-val " style="display:none"></p>

                        <div class="col-md-2">
                            <div class="form-input"><input type="text" data-validate="phone" maxlength="10" id="contactphoneID" class="contactphone validate-field" oninput="validateInputS(event,@i)" placeholder="phone" name="passengerdetails[@i].mobile" required /></div>
                        </div>
                        <p class="error-message error-phoneN" style="display:none"></p>
                        <p class="error-message-val" style="display:none"></p>
                    }
                    if (@Model.passeengerlist.passengers[i].passengerTypeCode == "INFT")
                    {
                        <div class="col-md-4 infant-dob-input ">
                            <div class="form-input dobinput d-flex">
                                <div class="dob-picker">
                                    <select class="brd-none day-select" name="passengerdetails[@i].day" required>
                                        <option value="" disabled selected>Day</option>
                                    </select>
                                    <select class="brd-none month-select" name="passengerdetails[@i].month" required>
                                        <option value="" disabled selected>Month</option>
                                        <option value="1">January</option>
                                        <option value="2">February</option>
                                        <option value="3">March</option>
                                        <option value="4">April</option>
                                        <option value="5">May</option>
                                        <option value="6">June</option>
                                        <option value="7">July</option>
                                        <option value="8">August</option>
                                        <option value="9">September</option>
                                        <option value="10">October</option>
                                        <option value="11">November</option>
                                        <option value="12">December</option>
                                    </select>
                                    <select class="brd-none year-select" name="passengerdetails[@i].year" required>
                                        <option value="" disabled selected>Year</option>
                                    </select>
                                </div>

                            </div>
                            <div class="validation-message-Required error-message" style="color: red; display: none;"></div>
                        </div>


                    }
                }
            </div>
        }
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-primary mt-15" id="showReviewPopup">Save</button>
        </div>
    </form>

</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<!-- Include Bootstrap JavaScript -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
    .error-message {
        color: red;
        font-size: 12px;
        margin: 5px 0 0 0;
        display: none;
    }

    .error-message-val {
        color: red;
        font-size: 12px;
        margin: 5px 0 0 0;
        display: none;
    }

    .error-input {
        border: 1px solid red;
    }

    .modal-body p {
        border-radius: 6px;
        box-shadow: 0 0 10px 0 rgb(0 0 0 / 9%);
        border: 1px solid #E4E3E1;
        padding: 8px;
        margin-bottom: 10px;
    }

    .dobinput {
        background: #fff;
        color: var(--color-light-1);
        border: 1px solid var(--color-border);
        border-radius: 4px;
        padding: 8px;
        min-height: 40px;
        transition: all 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
        width: 100%;
        font-size: 14px;
    }

    .brd-none {
        border: none;
    }

    .custom-select::-ms-expand {
        display: none; /* Hide the arrow icon in IE */
    }

    .custom-select option {
        padding: 5px; /* Set the desired padding for each option */
        height: 50px;
        overflow: hidden;
    }

    .checkbox-button2 {
        display: inline-block;
        width: 20px;
        height: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 0;
        cursor: pointer;
    }

        .checkbox-button2.checked::after {
            content: '\2713';
            font-size: 16px;
            color: #333;
            display: block;
            text-align: center;
            line-height: 20px;
        }

</style>
<script>

    function showErrorVal(element, message) {
        debugger;
        const parentElement = element.closest('.col-md-3, .col-md-2');
        let errorMessage = parentElement.querySelector('.error-message-val');
        if (!errorMessage) {
            errorMessage = document.createElement('p');
            errorMessage.className = 'error-message-val';
            parentElement.appendChild(errorMessage);
        }
        const errorMessageReq = parentElement.querySelector(".error-message");
        if (errorMessageReq) {
            errorMessageReq.style.display = 'none';
        }
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        element.classList.add('error-input');
        if (element.offsetParent !== null) {
            element.focus();
            return false;
        }
    }
    function removeErrorVal(element) {
        debugger;
        const parentElement = element.closest('.col-md-3, .col-md-2');
        const errorMessage = parentElement.querySelector('.error-message-val');
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
        const errorMessageReq = parentElement.querySelector(".error-message");
        if (errorMessageReq) {
            errorMessageReq.style.display = 'none';
        }
        element.classList.remove('error-input');
    }
    var buttonLead = document.getElementById('checkboxLead');
    buttonLead.addEventListener('click', function (e) {

        e.preventDefault();
        buttonLead.checked = !buttonLead.checked;
        if (buttonLead.checked) {

            buttonLead.classList.add('checked');
        } else {

            buttonLead.classList.remove('checked');
        }
        if (buttonLead.checked) {

            alert("Checked!!")
            var emaiLeadPass = document.querySelector('.contactemail').value;
            var phoneLeadPass = document.querySelector('.contactphone').value;
            //Get all elements with class "contactemail" and set their value
            var emailInputsT = document.querySelectorAll(".contactemail");
            emailInputsT.forEach(function (input) {
                input.value = emaiLeadPass;
                validateInputS({ target: input });
            });
            // Get all elements with class "contactphone" and set their value
            var phoneInputsT = document.querySelectorAll(".contactphone");
            phoneInputsT.forEach(function (input) {
                input.value = phoneLeadPass;
                validateInputS({ target: input });
            });
        } else {
            alert("Checkbox is unchecked");

            var emaiLeadPass = "";
            var phoneLeadPass = "";
            var emailInputsT = document.querySelectorAll(".contactemail");

            emailInputsT.forEach(function (input) {
                input.value = emaiLeadPass;
            });
            var phoneInputsT = document.querySelectorAll(".contactphone");

            phoneInputsT.forEach(function (input) {
                input.value = phoneLeadPass;
            });

            var emaiLeadPassenger = localStorage.getItem('Leadpassenger3');
            var phoneLeadPassenger = localStorage.getItem('Leadpassenger4');
            document.querySelector("#contactemailID").value = emaiLeadPassenger;
            document.querySelector("#contactphoneID").value = phoneLeadPassenger;
        }
    });

    function validateInputS(event) {
        debugger;
        const element = event.target;
        const value = element.value.trim();
        const validateType = element.getAttribute('data-validate');
        const validators = {
            name: /^[A-Za-z.]{0,32}$/,
            last: /^[A-Za-z.]{0,32}$/,
            email: /^(?!.*\.\.)[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/,
            phone: /^\d{10}$/
        };

        const messages = {
            name: 'Enter First Name.',
            last: 'Enter Last Name.',
            email: 'Enter valid email address.',
            phone: 'Enter valid phone number.',
            duplicate: 'Duplicate names are not allowed.'
        };
        if (value === "") {
            showErrorVal(element, messages[validateType]);
            return false;
        } else {
            removeErrorVal(element);
        }
        if (validateType === 'name' || validateType === 'last') {
            element.value = value.replace(/[^A-Za-z.]/g, '');
        }

        if (!validators[validateType].test(value)) {
            showErrorVal(element, messages[validateType]);
        } else {
            removeErrorVal(element);
        }
        if (validateType === 'name') {
            const allNames = document.querySelectorAll(`[data-validate="${validateType}"]`);
            const duplicate = Array.from(allNames).filter((el) => el.value.trim() === value && el !== element);
            if (duplicate.length > 0) {
                showErrorVal(element, messages['duplicate']);
                return false;
            } else {
                removeErrorVal(element);
            }
        }
    }
    document.addEventListener('DOMContentLoaded', function (event) {
        event.preventDefault();
        const infantContainers = document.querySelectorAll('.infant-dob-input');

        // Function to populate day options for a given container
        function populateDayOptions(container, year, month) {
            const daySelect = container.querySelector('.day-select');
            daySelect.innerHTML = ''; // Clear existing options
            const daysInMonth = new Date(year, month, 0).getDate(); // Get days in the selected month and year
            for (let i = 1; i <= daysInMonth; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                daySelect.appendChild(option);
            }
        }

        // Function to populate year options for a given container
        function populateYearOptions(container) {
            const yearSelect = container.querySelector('.year-select');
            const currentYear = new Date().getFullYear();
            const maxInfantAge = 2;
            for (let i = currentYear; i >= currentYear - maxInfantAge; i--) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                yearSelect.appendChild(option);
            }
        }

        // Function to populate month options for a given container
        function populateMonthOptions(container) {
            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];
            const monthSelect = container.querySelector('.month-select');
            monthSelect.innerHTML = ''; // Clear existing options
            monthNames.forEach((monthName, index) => {
                const option = document.createElement('option');
                option.value = index + 1; // Month numbers start from 1 (January) to 12 (December)
                option.textContent = monthName;
                monthSelect.appendChild(option);
            });
        }

        infantContainers.forEach(function (container) {
            populateYearOptions(container);
            populateMonthOptions(container);

            const yearSelect = container.querySelector('.year-select');
            const monthSelect = container.querySelector('.month-select');

            // Initial population of days based on the default year and month
            const defaultYear = yearSelect.value;
            const defaultMonth = monthSelect.value;
            populateDayOptions(container, defaultYear, defaultMonth);

            yearSelect.addEventListener('change', function () {
                const selectedYear = yearSelect.value;
                const selectedMonth = monthSelect.value;
                populateDayOptions(container, selectedYear, selectedMonth);
            });

            monthSelect.addEventListener('change', function () {
                const selectedYear = yearSelect.value;
                const selectedMonth = monthSelect.value;
                populateDayOptions(container, selectedYear, selectedMonth);
            });
        });
    });
    // document.addEventListener('DOMContentLoaded', function (event) {
    //     event.preventDefault();
    //     const infantContainers = document.querySelectorAll('.infant-dob-input');
    //     function populateDayOptions(container) {
    //         const daySelect = container.querySelector('.day-select');
    //         for (let i = 1; i <= 31; i++) {
    //             const option = document.createElement('option');
    //             option.value = i;
    //             option.textContent = i;
    //             daySelect.appendChild(option);
    //         }
    //     }
    //     // Function to populate year options for a given container
    //     function populateYearOptions(container) {
    //         const yearSelect = container.querySelector('.year-select');
    //         const currentYear = new Date().getFullYear();
    //         const maxInfantAge = 2;
    //         for (let i = currentYear; i >= currentYear - maxInfantAge; i--) {
    //             const option = document.createElement('option');
    //             option.value = i;
    //             option.textContent = i;
    //             yearSelect.appendChild(option);
    //         }
    //     }
    //     infantContainers.forEach(function (container) {
    //         populateDayOptions(container);
    //         populateYearOptions(container);
    //     });
    // });
</script>

<script type="text/javascript">
    $(document).ready(function () {
        function showForm() {
            $('#passengerForm').show();
        }
        $("#editData").click(function () {
            $("#dataPopup").hide();
        });
        $("#showReviewPopup").click(function (e) {
            e.preventDefault();

            /*******Validation Start*********/
            const fieldsToValidate = [
                { className: 'contactFname', errorMessage: 'First name is required ', validationdata: /^[A-Za-z.]{0,32}$/ },
                { className: 'contactLname', errorMessage: 'Last  name is required', validationdata: /^[A-Za-z.]{0,32}$/ },
                { className: 'contactemail', errorMessage: 'Email Address is required', validationdata: /^(?!.*\.\.)[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/ },
                { className: 'contactphone', errorMessage: 'Phone number is required', validationdata: /^\d{10}$/ }
            ];
            let firstInvalidElement = null;
            fieldsToValidate.forEach(field => {
                const elements = document.querySelectorAll(`.${field.className}`);
                elements.forEach(element => {
                    element.addEventListener("input", function () {
                        removeError(element);
                    });
                    if (element.value.trim() === "") {

                        showError(element, field.errorMessage);
                        if (!firstInvalidElement) {
                            firstInvalidElement = element;
                        }
                    } else if (!field.validationdata.test(element.value.trim())) {

                        showErrorVal(element, message);
                        // element.value = ""; // Clear the value if the pattern is wrong
                        // if (!firstInvalidElement) {
                        //     firstInvalidElement = element;
                        // }
                    }
                });
            });
            if (firstInvalidElement) {

                firstInvalidElement.focus();
                return false;
            } else {
                // document.getElementById('passengerForm').submit();
            }
            function removeError(element) {

                const parentElement = element.closest('.col-md-3,.col-md-2');
                const errorMessage = parentElement.querySelector(".error-message");
                if (errorMessage) {
                    errorMessage.style.display = 'none';
                }
                element.classList.remove("error-input");
            }
            function showError(element, message) {

                const parentElement = element.closest('.col-md-3, .col-md-2');
                const errorMessagedata = parentElement.querySelector('.error-message-val');
                if (errorMessagedata) {
                    errorMessagedata.style.display = 'none';
                }
                let errorMessage = parentElement.querySelector(".error-message");
                if (!errorMessage) {
                    errorMessage = document.createElement("p");
                    errorMessage.className = "error-message";
                    parentElement.appendChild(errorMessage);
                }
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
                element.classList.add("error-input");
            }
            //Infant
            if (!validateMultipleInfantDOBs()) {
                return false;
            }
            function validateInfantDOB(dob) {
                if (!dob) {
                    return false;
                }
                var dobDate = new Date(dob);
                var currentDate = new Date();

                if (isNaN(dobDate.getTime())) {
                    return false;
                }
                var ageDiff = currentDate.getFullYear() - dobDate.getFullYear();
                var monthDiff = currentDate.getMonth() - dobDate.getMonth();
                var dayDiff = currentDate.getDate() - dobDate.getDate();
                if (ageDiff > 2) {
                    return false;
                }
                if (ageDiff === 2) {
                    if (monthDiff > 0 || (monthDiff === 0 && dayDiff >= 0)) {
                        return false;
                    }
                }
                return true;
            }
            function validateMultipleInfantDOBs() {
                var infantsValid = true;

                $(".dobinput:visible").each(function () {

                    var day = $(this).find('.day-select').val();
                    var month = $(this).find('.month-select').val();
                    var year = $(this).find('.year-select').val();
                    var dob = year + "-" + month + "-" + day;
                    var validationMessageReq = $(this).closest('.infant-dob-input').find('.validation-message-Required');
                    if (!day || !month || !year) {

                        validationMessageReq.text("Enter valid date of birth.");
                        validationMessageReq.show();
                        infantsValid = false;
                    } else if (!validateInfantDOB(dob)) {

                        validationMessageReq.text("Infant can not be greater than 2 years.");
                        validationMessageReq.show();
                        infantsValid = false;
                    } else {
                        validationMessageReq.hide();
                    }
                });
                return infantsValid;
            }
            /*******Validation End*********/


            var enteredData = "";
            for (var i = 0; i < @Model.passeengerlist.passengers.Count; i++) {
                var firstName = $("input[name='passengerdetails[" + i + "].First']").val();
                var lastName = $("input[name='passengerdetails[" + i + "].Last']").val();
                var title = $("select[name='passengerdetails[" + i + "].Title']").val();
                var Passengertypecode = $("input[name='passengerdetails[" + i + "].passengertypecode']").val();
                if (Passengertypecode == "ADT") { Passengertypecode = "Adult"; }
                if (Passengertypecode == "CHD") { Passengertypecode = "Child"; }
                enteredData += "<p><strong>Passenger " + (i + 1) + ": (" + Passengertypecode + ")</strong><br>";
                enteredData += "Title: " + title + "<br>";
                enteredData += "First Name: " + firstName + "<br>";
                enteredData += "Last Name: " + lastName + "</p>";
            }
            // Display the entered data in the popup
            $("#enteredData").html(enteredData);
            // Show the popup
            $('#dataPopup').modal('show');
            // Hide the form
            //$('#passengerForm').hide();
        });
        $("#ContinueData").click(function () {
            $('#passengers_id').hide(); //Contact Details Div Hide
            //*************Validation effect Start**********
            var contentToDisplay = document.getElementById("content");
            contentToDisplay.style.display = "none";
            var content2To = document.getElementById("content2");
            content2To.style.display = "none";
            // var toggleButton3To = document.getElementById("toggleButton3");
            // toggleButton3To.style.opacity = "1.0";
            // var content3To = document.getElementById("content3");
            // content3To.style.display = "block";
            var toggleButton4To = document.getElementById("toggleButton4");
            toggleButton4To.style.opacity = "1.0";
            var GSTcontent5To = document.getElementById("content4");
            GSTcontent5To.style.display = "block";

            var GSTContinuebtn1 = document.querySelector("#Continuebtn");
            GSTContinuebtn1.disabled = false;
            GSTContinuebtn1.style.opacity = "1.0";

            var formData = new FormData($("#passengerForm")[0]);
            $.ajax({
                url: "/SGTripsell/SGTravllerDetails",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (result) {
                    //alert(result);
                    $('#SpiceJetPartialView').html(result);
                    // Handle the response from the server if needed
                },
                error: function (error) {
                    // Handle any errors here
                }
            });
        });


    });

</script>
<div class="modal fade" id="dataPopup" tabindex="-1" role="dialog" aria-labelledby="dataPopupLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content pb-3">
            <div class="modal-header">
                <h5 class="modal-title" id="dataPopupLabel">Please review your details to ensure accuracy.</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="enteredData">
                <!-- Display the entered data here -->

            </div>
            <div class="d-flex justify-content-end">
                <div class="editbtn me-3">
                    <button type="button" data-dismiss="modal" class="btn btn-primary w-20" id="editData">Edit</button>
                </div>
                <div class="countibtn me-3">
                    <button type="button" data-dismiss="modal" class="btn btn-primary w-20" id="ContinueData">Continue</button>
                </div>
            </div>

        </div>
    </div>
</div>


